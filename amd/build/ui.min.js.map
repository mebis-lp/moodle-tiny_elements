{"version":3,"file":"ui.min.js","sources":["../src/ui.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny Elements UI.\n *\n * @module      tiny_elements/ui\n * @copyright   2022 Marc Catal√† <reskit@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ElementsModal from './modal';\nimport ModalFactory from 'core/modal_factory';\nimport {\n    isStudent,\n    showPreview,\n    canManage,\n    markComponents\n} from './options';\nimport ModalEvents from 'core/modal_events';\nimport {\n    addVariant,\n    getVariantsClass,\n    getVariantHtml,\n    getVariantPreferences,\n    getVariantsHtml,\n    loadVariantPreferences,\n    removeVariant,\n    setData as setVariantsData\n} from './variantslib';\nimport {\n    savePreferences,\n    loadPreferences,\n    Preferences\n} from './preferencelib';\nimport {getContextId} from 'editor_tiny/options';\nimport Data from './data';\n\nlet currentFlavor = '';\nlet currentFlavorId = 0;\nlet currentCategoryId = 1;\nlet currentCategoryName = '';\nlet lastFlavor = [];\nlet sel = '';\nlet data = {};\n\n/**\n * Handle action\n *\n * @param {TinyMCE} editor\n */\nexport const handleAction = async(editor) => {\n    sel = editor.selection.getContent();\n    data = new Data(\n        getContextId(editor),\n        isStudent(editor),\n        showPreview(editor),\n        canManage(editor)\n    );\n    await data.loadData();\n    setVariantsData(data);\n\n    currentCategoryId = await loadPreferences(Preferences.category);\n    lastFlavor = await loadPreferences(Preferences.category_flavors);\n    if (lastFlavor === null) {\n        lastFlavor = [];\n    }\n    let componentVariants = await loadPreferences(Preferences.component_variants);\n    if (componentVariants === null) {\n        componentVariants = {};\n    }\n    loadVariantPreferences(componentVariants);\n    displayDialogue(editor);\n};\n\n/**\n * Display modal\n *\n * @param  {TinyMCE} editor\n */\nconst displayDialogue = async(editor) => {\n    const templateContext = data.getTemplateContext(editor);\n    // Show modal with buttons.\n    const modal = await ModalFactory.create({\n        type: ElementsModal.TYPE,\n        templateContext: templateContext,\n        large: true,\n    });\n\n    // Choose class to modal.\n    const modalClass = data.getPreviewElements() ? 'elements-modal' : 'elements-modal-no-preview';\n\n    // Set class to modal.\n    editor.targetElm.closest('body').classList.add(modalClass);\n\n    modal.show();\n\n    // Event modal listener.\n    modal.getRoot().on(ModalEvents.hidden, () => {\n        handleModalHidden(editor);\n    });\n\n    // Event listener for categories without flavors.\n    const soleCategories = modal.getRoot()[0].querySelectorAll('.elements-category.no-flavors');\n    soleCategories.forEach(node => {\n        node.addEventListener('click', (event) => {\n            handleCategoryClick(event, modal);\n        });\n    });\n\n    // Event listener for categories with flavors.\n    const selectCategories = modal.getRoot()[0].querySelectorAll('.elements-category-flavor');\n    selectCategories.forEach(node => {\n        node.addEventListener('click', (event) => {\n            handleCategoryFlavorClick(event, modal);\n        });\n    });\n\n    // Event listener for category dropdown, triggering to switch to last used flavor.\n    const selectCategoriesRemember = modal.getRoot()[0].querySelectorAll('.nav-link.dropdown-toggle');\n    selectCategoriesRemember.forEach(node => {\n        node.addEventListener('click', (event) => {\n            handleCategoryRemember(event, modal);\n        });\n    });\n\n    // Event buttons listeners.\n    const buttons = modal.getRoot()[0].querySelectorAll('.elementst-dialog-button');\n    buttons.forEach(node => {\n        node.addEventListener('click', (event) => {\n            handleButtonClick(event, editor, modal);\n        });\n        if (data.getPreviewElements()) {\n            node.addEventListener('mouseenter', (event) => {\n                handleButtonMouseEvent(event, modal, true);\n            });\n            node.addEventListener('mouseleave', (event) => {\n                handleButtonMouseEvent(event, modal, false);\n            });\n        }\n    });\n\n    // Event variants listeners.\n    const variants = modal.getRoot()[0].querySelectorAll('.elements-button-variant');\n    variants.forEach(node => {\n        node.addEventListener('click', (event) => {\n            handleVariantClick(event, modal);\n        });\n    });\n\n    // Select first or saved category.\n    if (soleCategories.length > 0 || selectCategories.length > 0) {\n        const savedCategory = currentCategoryId;\n        const savedFlavor = lastFlavor[currentCategoryId];\n        if (soleCategories.length == 0 || soleCategories[0].displayorder > selectCategories[0].displayorder) {\n            selectCategories[0].click();\n        } else {\n            soleCategories[0].click();\n        }\n        if (savedCategory != 0) {\n            soleCategories.forEach((node) => {\n                if (node.dataset.categoryid == savedCategory) {\n                    node.click();\n                }\n            });\n            selectCategories.forEach((node) => {\n                if (node.dataset.categoryid == savedCategory) {\n                    node.click();\n                }\n            });\n            if (savedFlavor) {\n                const flavorlink = modal.getRoot()[0].querySelector(\n                    '.elements-category-flavor[data-id=\"' + savedFlavor + '\"]'\n                );\n                if (flavorlink) {\n                    flavorlink.click();\n                }\n            }\n        }\n    }\n};\n\n/**\n * Handle a click within filter button.\n *\n * @param {MouseEvent} event The change event\n * @param {obj} modal\n */\nconst handleCategoryClick = (event, modal) => {\n    const link = event.target;\n    currentCategoryId = link.dataset.categoryid;\n    currentCategoryName = link.dataset.categoryname;\n\n    // Remove active from all and set to selected.\n    const links = modal.getRoot()[0].querySelectorAll('.nav-link, .dropdown-item');\n    links.forEach(node => node.classList.remove('active'));\n    link.classList.add('active');\n\n    // Show/hide component buttons.\n    showCategoryButtons(modal, currentCategoryName);\n};\n\n/**\n * Handle a click on a flavor in the category dropdown.\n *\n * @param {MouseEvent} event The change event\n * @param {obj} modal\n */\nconst handleCategoryFlavorClick = (event, modal) => {\n    const link = event.target;\n    currentFlavor = link.dataset.flavor;\n    currentFlavorId = link.dataset.id;\n    currentCategoryId = link.dataset.categoryid;\n    currentCategoryName = link.dataset.categoryname;\n    lastFlavor[currentCategoryId] = currentFlavorId;\n\n    // Remove active from all and set to selected.\n    const links = modal.getRoot()[0].querySelectorAll('.nav-link, .dropdown-item');\n    links.forEach(node => node.classList.remove('active'));\n    link.classList.add('active');\n    const category = modal.getRoot()[0].querySelector('.nav-link[data-categoryid=\"' + currentCategoryId + '\"]');\n    category.classList.add('active');\n\n    const componentButtons = modal.getRoot()[0].querySelectorAll('.elements-buttons-preview button');\n    componentButtons.forEach(componentButton => {\n        // Remove previous flavor.\n        if (componentButton.dataset.flavor != undefined) {\n            componentButton.classList.remove(componentButton.dataset.flavor);\n        }\n        componentButton.classList.add(currentFlavor);\n        componentButton.dataset.flavor = currentFlavor;\n        if (\n            (componentButton.dataset.flavorlist == '' || componentButton.dataset.flavorlist.split(',').includes(currentFlavor)) &&\n            componentButton.dataset.category == currentCategoryName\n        ) {\n            componentButton.classList.remove('elements-hidden');\n            if (componentButton.dataset.flavorlist != '') {\n                let variants = getVariantsClass(data.getComponentById(componentButton.dataset.id).name, currentFlavor);\n                let availableVariants = componentButton.querySelectorAll('.elements-button-variant');\n                availableVariants.forEach((variant) => {\n                    updateVariantButtonState(variant, variants.indexOf(variant.dataset.variantclass) != -1);\n                });\n            }\n        } else {\n            componentButton.classList.add('elements-hidden');\n        }\n    });\n\n};\n\n/**\n * When opening the category dropdown, try to load remembered flavor.\n *\n * @param {MouseEvent} event The change event\n * @param {obj} modal\n */\nconst handleCategoryRemember = (event, modal) => {\n    const link = event.target;\n    currentCategoryId = link.dataset.categoryid;\n    currentCategoryName = link.dataset.categoryname;\n    currentFlavorId = lastFlavor[currentCategoryId];\n\n    if (currentFlavorId != undefined) {\n        // Call handleCategoryFlavorClick with tampered data.\n        let e = {target: modal.getRoot()[0].querySelector('.elements-category-flavor[data-id=\"' + currentFlavorId + '\"]')};\n        handleCategoryFlavorClick(e, modal);\n    }\n};\n\n/**\n * Handle when closing the Modal.\n *\n * @param {obj} editor\n */\nconst handleModalHidden = (editor) => {\n    editor.targetElm.closest('body').classList.remove('elements-modal-no-preview');\n    if (currentCategoryId != 0 && currentFlavorId != 0) {\n        savePreferences([\n            {type: Preferences.category, value: currentCategoryId},\n            {type: Preferences.category_flavors, value: JSON.stringify(lastFlavor)},\n            {type: Preferences.component_variants, value: JSON.stringify(getVariantPreferences())}\n        ]);\n    }\n};\n\nconst updateComponentCode = (componentCode, selectedButton, placeholder, flavor = '') => {\n    componentCode = componentCode.replace('{{PLACEHOLDER}}', placeholder);\n    const comp = data.getComponentById(selectedButton);\n    // Return active variants for current component.\n    const variants = getVariantsClass(comp.name, flavor);\n\n    // Apply variants to html component.\n    if (variants.length > 0) {\n        componentCode = componentCode.replace('{{VARIANTS}}', variants.join(' '));\n        componentCode = componentCode.replace('{{VARIANTSHTML}}', getVariantsHtml(comp.name));\n    } else {\n        componentCode = componentCode.replace('{{VARIANTS}}', '');\n        componentCode = componentCode.replace('{{VARIANTSHTML}}', '');\n    }\n\n    if (currentFlavor) {\n        componentCode = componentCode.replace('{{FLAVOR}}', 'elements-' + currentFlavor + '-flavor');\n    } else {\n        componentCode = componentCode.replace('{{FLAVOR}}', '');\n    }\n\n    componentCode = componentCode.replace('{{COMPONENT}}', 'elements-' + comp.name);\n    componentCode = componentCode.replace('{{CATEGORY}}', 'elements-' + data.getCategoryById(currentCategoryId).name);\n\n    // Apply random IDs.\n    componentCode = applyRandomID(componentCode);\n\n    // Apply lang strings.\n    componentCode = applyLangStrings(componentCode);\n\n    return componentCode;\n};\n\n/**\n * Handle a click in a component button.\n *\n * @param {MouseEvent} event The click event\n * @param {obj} editor\n * @param {obj} modal\n */\nconst handleButtonClick = async(event, editor, modal) => {\n    const selectedButton = event.target.closest('button').dataset.id;\n\n    const comp = data.getComponentById(selectedButton);\n\n    // Component button.\n    if (comp) {\n        let componentCode = comp.code;\n        const placeholder = (sel.length > 0 ? sel : comp.text);\n\n        let flavor = comp.flavors.length > 0 ? currentFlavor : '';\n\n        // Create a new node to replace the placeholder.\n        const randomId = generateRandomID();\n        const newNode = document.createElement('span');\n        newNode.dataset.id = randomId;\n        newNode.innerHTML = placeholder;\n        componentCode = updateComponentCode(componentCode, selectedButton, newNode.outerHTML, flavor);\n        // Sets new content.\n        if (markComponents) {\n            componentCode = '<!-- tiny_elements -->' + componentCode + '<!-- /tiny_elements -->';\n        }\n        editor.selection.setContent(componentCode);\n\n        // Select text.\n        const nodeSel = editor.dom.select('span[data-id=\"' + randomId + '\"]');\n        if (nodeSel?.[0]) {\n            editor.selection.select(nodeSel[0]);\n        }\n\n        modal.destroy();\n        editor.focus();\n    }\n};\n\n/**\n * Handle a mouse events mouseenter/mouseleave in a component button.\n *\n * @param {MouseEvent} event The click event\n * @param {obj} modal\n * @param {bool} show\n */\nconst handleButtonMouseEvent = (event, modal, show) => {\n    const selectedButton = event.target.closest('button').dataset.id;\n    const node = modal.getRoot()[0].querySelector('div[data-id=\"code-preview-' + selectedButton + '\"]');\n    const previewDefault = modal.getRoot()[0].querySelector('div[data-id=\"code-preview-default\"]');\n    const comp = data.getComponentById(selectedButton);\n\n    let flavor = comp.flavors.length > 0 ? currentFlavor : '';\n\n    const placeholder = (sel.length > 0 ? sel : comp.text);\n\n    node.innerHTML = updateComponentCode(comp.code, selectedButton, placeholder, flavor);\n\n    if (node) {\n        if (show) {\n            previewDefault.classList.toggle('elements-hidden');\n            node.classList.toggle('elements-hidden');\n        } else {\n            node.classList.toggle('elements-hidden');\n            previewDefault.classList.toggle('elements-hidden');\n        }\n    }\n};\n\n/**\n * Handle a mouse event within the variant buttons.\n *\n * @param {MouseEvent} event The mouseenter/mouseleave event\n * @param {obj} modal\n */\nconst handleVariantClick = (event, modal) => {\n    event.stopPropagation();\n    const variant = event.target.closest('span');\n    const button = event.target.closest('button');\n    const comp = data.getComponentById(button.dataset.id);\n    const flavor = comp.flavors.length > 0 ? currentFlavor : '';\n\n    updateVariantComponentState(variant, button, modal, false, true);\n\n    const node = modal.getRoot()[0].querySelector('div[data-id=\"code-preview-' + button.dataset.id + '\"]');\n    node.innerHTML = updateComponentCode(\n        comp.code,\n        button.dataset.id,\n        comp.text,\n        flavor\n    );\n};\n\n/**\n * Update a variant component UI.\n *\n * @param {obj} variant\n * @param {obj} button\n * @param {obj} modal\n * @param {bool} show\n * @param {bool} updateHtml\n */\nconst updateVariantComponentState = (variant, button, modal, show, updateHtml) => {\n    const selectedVariant = variant.dataset.variantclass;\n    const selectedButton = button.dataset.id;\n    const componentClass = button.dataset.classcomponent;\n    const previewComponent = modal.getRoot()[0]\n        .querySelector('div[data-id=\"code-preview-' + button.dataset.id + '\"] .' + componentClass);\n    const variantPreview = modal.getRoot()[0]\n        .querySelector('span[data-id=\"variantHTML-' + button.dataset.id + '\"]');\n    const comp = data.getComponentById(selectedButton);\n    let variantsHtml = '';\n    let hasflavors = comp.flavors.length > 0;\n\n    if (previewComponent) {\n        if (updateHtml) {\n            if (variant.dataset.state == 'on') {\n                removeVariant(comp.name, variant.dataset.variant, hasflavors ? currentFlavor : '');\n                updateVariantButtonState(variant, false);\n                previewComponent.classList.remove(selectedVariant);\n            } else {\n                addVariant(comp.name, variant.dataset.variant, hasflavors ? currentFlavor : '');\n                updateVariantButtonState(variant, true);\n                previewComponent.classList.add(selectedVariant);\n            }\n\n            // Update variant preview HTML.\n            if (variantPreview) {\n                variantPreview.innerHTML = getVariantsHtml(comp.name);\n            }\n        } else {\n            variantsHtml = getVariantsHtml(comp.name);\n            if (show) {\n                previewComponent.classList.add(selectedVariant);\n                variantsHtml += getVariantHtml(variant.dataset.variant);\n            } else {\n                previewComponent.classList.remove(selectedVariant);\n            }\n\n            // Update variant preview HTML.\n            if (variantPreview) {\n                variantPreview.innerHTML = variantsHtml;\n            }\n        }\n    } else {\n        // Update variants preferences.\n        if (variant.dataset.state == 'on') {\n            removeVariant(comp.name, variant.dataset.variant, hasflavors ? currentFlavor : '');\n            updateVariantButtonState(variant, false);\n        } else {\n            addVariant(comp.name, variant.dataset.variant, hasflavors ? currentFlavor : '');\n            updateVariantButtonState(variant, true);\n        }\n    }\n};\n\n/**\n * Update a variant button UI.\n *\n * @param {obj} variant\n * @param {bool} activate\n */\nconst updateVariantButtonState = (variant, activate) => {\n    if (activate) {\n        variant.dataset.state = 'on';\n        variant.classList.remove(variant.dataset.variant + '-variant-off');\n        variant.classList.add(variant.dataset.variant + '-variant-on');\n        variant.classList.add('on');\n    } else {\n        variant.dataset.state = 'off';\n        variant.classList.remove(variant.dataset.variant + '-variant-on');\n        variant.classList.add(variant.dataset.variant + '-variant-off');\n        variant.classList.remove('on');\n    }\n};\n\n/**\n * Show/hide buttons depend on selected context.\n *\n * @param  {object} modal\n * @param  {String} context\n */\nconst showCategoryButtons = (modal, context) => {\n    const showNodes = modal.getRoot()[0].querySelectorAll('button[data-type=\"' + context + '\"]');\n    const hideNodes = modal.getRoot()[0].querySelectorAll('button[data-type]:not([data-type=\"' + context + '\"])');\n\n    showNodes.forEach(node => node.classList.remove('elements-hidden'));\n    hideNodes.forEach(node => node.classList.add('elements-hidden'));\n};\n\n/**\n * Replace all localized strings.\n *\n * @param  {String} text\n * @return {String} String with lang tags replaced with a localized string.\n */\nconst applyLangStrings = (text) => {\n    const compRegex = /{{#([^}]*)}}/g;\n\n    [...text.matchAll(compRegex)].forEach(strLang => {\n        text = text.replace('{{#' + strLang[1] + '}}', data.getLangString(strLang[1]));\n    });\n\n    return text;\n};\n\n/**\n * Generates a random string.\n * @return {string} A random string\n */\nconst generateRandomID = () => {\n    const timestamp = new Date().getTime();\n    return 'R' + Math.round(Math.random() * 100000) + '-' + timestamp;\n};\n\n/**\n * Replace all ID tags with a random string.\n * @param  {String} text\n * @return {String} String with all ID tags replaced with a random string.\n */\nconst applyRandomID = (text) => {\n    const compRegex = /{{@ID}}/g;\n\n    if (text.match(compRegex)) {\n        text = text.replace(compRegex, generateRandomID());\n    }\n\n    return text;\n};\n"],"names":["currentFlavor","currentFlavorId","currentCategoryId","currentCategoryName","lastFlavor","sel","data","async","editor","selection","getContent","Data","loadData","Preferences","category","category_flavors","componentVariants","component_variants","displayDialogue","templateContext","getTemplateContext","modal","ModalFactory","create","type","ElementsModal","TYPE","large","modalClass","getPreviewElements","targetElm","closest","classList","add","show","getRoot","on","ModalEvents","hidden","handleModalHidden","soleCategories","querySelectorAll","forEach","node","addEventListener","event","handleCategoryClick","selectCategories","handleCategoryFlavorClick","handleCategoryRemember","handleButtonClick","handleButtonMouseEvent","handleVariantClick","length","savedCategory","savedFlavor","displayorder","click","dataset","categoryid","flavorlink","querySelector","link","target","categoryname","remove","showCategoryButtons","flavor","id","componentButton","undefined","flavorlist","split","includes","variants","getComponentById","name","variant","updateVariantButtonState","indexOf","variantclass","e","value","JSON","stringify","updateComponentCode","componentCode","selectedButton","placeholder","replace","comp","join","getCategoryById","applyRandomID","applyLangStrings","code","text","flavors","randomId","generateRandomID","newNode","document","createElement","innerHTML","outerHTML","markComponents","setContent","nodeSel","dom","select","destroy","focus","previewDefault","toggle","stopPropagation","button","updateVariantComponentState","updateHtml","selectedVariant","componentClass","classcomponent","previewComponent","variantPreview","variantsHtml","hasflavors","state","activate","context","showNodes","hideNodes","matchAll","strLang","getLangString","timestamp","Date","getTime","Math","round","random","compRegex","match"],"mappings":"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"}