{"version":3,"file":"management.min.js","sources":["../src/management.js"],"sourcesContent":["import Modal from 'core/modal';\nimport ModalForm from 'core_form/modalform';\nimport Notification from 'core/notification';\nimport {get_string as getString} from 'core/str';\nimport {exception as displayException, deleteCancelPromise} from 'core/notification';\nimport {call as fetchMany} from 'core/ajax';\nimport {render as renderTemplate} from 'core/templates';\nclass PreviewModal extends Modal {\n    static TYPE = \"tiny_elements/management_preview\";\n    static TEMPLATE = \"tiny_elements/management_preview\";\n    configure(modalConfig) {\n        modalConfig.removeOnClose = true;\n        modalConfig.large = true;\n        super.configure(modalConfig);\n    }\n}\n\nexport const init = async(params) => {\n\n    // Add listener to import xml files.\n    let importxml = document.getElementById('elements_import');\n    importxml.addEventListener('click', async(e) => {\n        importModal(e);\n    });\n\n    // Add listener for adding a new item.\n    let additem = document.getElementsByClassName('add');\n    additem.forEach(element => {\n        element.addEventListener('click', async(e) => {\n            showModal(e, element.dataset.id, element.dataset.table);\n        });\n    });\n\n    // Add listener to edit items.\n    let edititems = document.getElementsByClassName('edit');\n    edititems.forEach(element => {\n        element.addEventListener('click', async(e) => {\n            showModal(e, element.dataset.id, element.dataset.table);\n        });\n    });\n\n    // Add listener to delete items.\n    let deleteitems = document.getElementsByClassName('delete');\n    deleteitems.forEach(element => {\n        element.addEventListener('click', async(e) => {\n            deleteModal(e, element.dataset.id, element.dataset.title, element.dataset.table);\n        });\n    });\n\n    // Add listener to preview items.\n    let previewitems = document.getElementsByClassName('preview');\n    previewitems.forEach(element => {\n        element.addEventListener('click', async(e) => {\n            previewModal(e);\n        });\n    });\n\n    // Add listener to select compcat to show corresponding items.\n    let compcats = document.getElementsByClassName('compcat');\n    compcats.forEach(element => {\n        element.addEventListener('click', async(e) => {\n            showItems(e, element.dataset.compcat);\n        });\n    });\n\n    // Add listener to manage component flavor relation.\n    let buttonicons = document.querySelectorAll('.buttonicons');\n    buttonicons.forEach(element => {\n        element.addEventListener('click', async(e) => {\n            compflavorModal(e);\n        });\n    });\n\n    let displaynamesbutton = document.getElementById('elements_displaynames_button');\n    displaynamesbutton.addEventListener('click', async(e) => {\n        displaynamesModal(e);\n    });\n\n    let displaynamesflavorbutton = document.getElementById('elements_displaynames_flavor_button');\n    displaynamesflavorbutton.addEventListener('click', async(e) => {\n        displaynamesFlavorModal(e);\n    });\n\n    let displaynamesvariantbutton = document.getElementById('elements_displaynames_variant_button');\n    displaynamesvariantbutton.addEventListener('click', async(e) => {\n        displaynamesVariantModal(e);\n    });\n\n    // Add listener to duplicate items.\n    let duplicateitems = document.getElementsByClassName('duplicate');\n    duplicateitems.forEach(element => {\n        element.addEventListener('click', async() => {\n            duplicateItem(element.dataset.id, element.dataset.table).always(() => reload());\n        });\n    });\n\n    // Add image and text to item setting click area.\n    let enlargeItems = document.querySelectorAll(\n        '.flavor .card-body > .clickingextended, .component .card-body > .clickingextended, .variant .card-body > .clickingextended'\n    );\n    enlargeItems.forEach(element => {\n        element.addEventListener('click', async(e) => {\n            let item = e.target.closest('.item');\n            item.querySelector('a.edit').click();\n        });\n    });\n\n    // After submitting a new item, reset active compcat.\n    if (params.compcatactive) {\n        let compcat = document.querySelector('.compcat[data-compcat=\"' + params.compcatactive + '\"]');\n        if (compcat) {\n            showItems(false, params.compcatactive);\n            compcat.classList.add('active');\n        }\n    }\n};\n\n/**\n * Show dynamic form to add/edit a source.\n * @param {*} e\n * @param {*} id\n * @param {*} table\n */\nfunction showModal(e, id, table) {\n    e.preventDefault();\n    let title;\n    if (id == 0) {\n        title = getString('additem', 'tiny_elements');\n    } else {\n        title = getString('edititem', 'tiny_elements');\n    }\n\n    const modalForm = new ModalForm({\n        // Set formclass, depending on component.\n        formClass: \"tiny_elements\\\\form\\\\management_\" + table + \"_form\",\n        args: {\n            id: id,\n            compcat: getActiveCompcatId(),\n            categoryname: getActiveCompcatName(),\n        },\n        modalConfig: {title: title},\n    });\n    // Conditional reload page after submit.\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, () => reloadIfNew(modalForm.getFormNode()));\n\n    modalForm.show();\n}\n\n/**\n * Show modal to preview css version.\n * @param {*} e\n */\nasync function previewModal(e) {\n    e.preventDefault();\n    let preview = e.target.closest(\".preview\");\n    const modal = await PreviewModal.create({\n        templateContext: {\n            component: preview.dataset.component,\n            flavors: preview.dataset.flavors.trim().split(\" \"),\n            config: M.cfg,\n        },\n    });\n    modal.show();\n}\n\n/**\n * Show dynamic form to import xml backups.\n * @param {*} e\n */\nfunction importModal(e) {\n    e.preventDefault();\n    let title = getString('import', 'tiny_elements');\n\n    const modalForm = new ModalForm({\n        // Load import form.\n        formClass: \"tiny_elements\\\\form\\\\management_import_form\",\n        args: {},\n        modalConfig: {title: title},\n    });\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, importModalSubmitted);\n\n    modalForm.show();\n}\n\n/**\n * Process import form submit.\n * @param {*} e\n */\nasync function importModalSubmitted(e) {\n    // Reload page after submit.\n    if (e.detail.update) {\n        location.reload();\n    } else {\n        e.stopPropagation();\n        renderTemplate('tiny_elements/management_import_form_result', e.detail).then(async(html) => {\n            await Notification.alert(\n                getString('import_simulation', 'tiny_elements'),\n                html,\n                getString('close', 'tiny_elements')\n            );\n            return true;\n        }).catch((error) => {\n            displayException(error);\n        });\n    }\n}\n\n/**\n * Load modal to edit icon urls.\n * @param {*} e\n */\nfunction compflavorModal(e) {\n    e.preventDefault();\n    let title = getString('manage', 'tiny_elements');\n    const target = e.target.closest('.buttonicons');\n    const component = target.dataset.component ?? '';\n    const flavor = target.dataset.flavor ?? '';\n    const modalForm = new ModalForm({\n        // Load import form.\n        formClass: \"tiny_elements\\\\form\\\\management_comp_flavor_form\",\n        args: {\n            component: component,\n            flavor: flavor,\n        },\n        modalConfig: {title: title},\n    });\n\n    modalForm.show();\n}\n\n/**\n * Load modal to edit displaynames.\n * @param {*} e\n * @returns {void}\n */\nfunction displaynamesModal(e) {\n    e.preventDefault();\n    let title = getString('manage', 'tiny_elements');\n\n    const modalForm = new ModalForm({\n        // Load displaynames bulk edit form.\n        formClass: \"tiny_elements\\\\form\\\\management_displaynames_form\",\n        args: {},\n        modalConfig: {title: title},\n    });\n\n    // Reload page after submit.\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, () => location.reload());\n\n    modalForm.show();\n}\n\n/**\n * Load modal to edit displaynames.\n * @param {*} e\n * @returns {void}\n */\nfunction displaynamesFlavorModal(e) {\n    e.preventDefault();\n    let title = getString('manage', 'tiny_elements');\n\n    const modalForm = new ModalForm({\n        // Load displaynames bulk edit form.\n        formClass: \"tiny_elements\\\\form\\\\management_displaynames_flavors_form\",\n        args: {},\n        modalConfig: {title: title},\n    });\n\n    // Reload page after submit.\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, () => location.reload());\n\n    modalForm.show();\n}\n\n/**\n * Load modal to edit displaynames.\n * @param {*} e\n * @returns {void}\n */\nfunction displaynamesVariantModal(e) {\n    e.preventDefault();\n    let title = getString('manage', 'tiny_elements');\n\n    const modalForm = new ModalForm({\n        // Load displaynames bulk edit form.\n        formClass: \"tiny_elements\\\\form\\\\management_displaynames_variants_form\",\n        args: {},\n        modalConfig: {title: title},\n    });\n\n    // Reload page after submit.\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, () => location.reload());\n\n    modalForm.show();\n}\n\n/**\n * Show dynamic form to delete a source.\n * @param {*} e\n * @param {*} id\n * @param {*} title\n * @param {*} table\n */\nfunction deleteModal(e, id, title, table) {\n    e.preventDefault();\n\n    deleteCancelPromise(\n        getString('delete', 'tiny_elements', title),\n        getString('deletewarning', 'tiny_elements'),\n    ).then(async() => {\n        if (id !== 0) {\n            try {\n                const deleted = await deleteItem(id, table);\n                if (deleted) {\n                    const link = document.querySelector('[data-table=\"' + table + '\"][data-id=\"' + id + '\"]');\n                    if (link) {\n                        const card = link.closest(\".item\");\n                        card.remove();\n                    }\n                }\n            } catch (error) {\n                displayException(error);\n            }\n        }\n        return;\n    }).catch(() => {\n        return;\n    });\n}\n\n/**\n * Delete elements items.\n * @param {*} id\n * @param {*} table\n * @returns {mixed}\n */\nexport const deleteItem = (\n    id,\n    table,\n) => fetchMany(\n    [{\n        methodname: 'tiny_elements_delete_item',\n        args: {\n            id,\n            table,\n        }\n    }])[0];\n\n/**\n * Show items after clicking a compcat.\n * @param {*} e\n * @param {*} compcat\n */\nfunction showItems(e, compcat) {\n    // But first hide all items.\n    let itemsHide = document.querySelectorAll('.flavor, .component, .variant');\n    itemsHide.forEach(element => {\n        element.classList.add('hidden');\n    });\n\n    // Show component and variants with compcat name and read the flavors.\n    let itemsShow = document.querySelectorAll('[data-categoryname=\"' + compcat + '\"]');\n    let usedFlavors = [];\n    itemsShow.forEach(element => {\n        element.classList.remove('hidden');\n        // Get all flavors to show if on compcat element.\n        if (typeof element.dataset.flavors !== 'undefined') {\n            let flavors = element.dataset.flavors.split(' ');\n            for (let value of flavors) {\n                if (!usedFlavors.includes(value) && value.length != 0) {\n                    usedFlavors.push(value);\n                }\n            }\n        }\n    });\n\n    // Show the flavors.\n    let flavorstring = usedFlavors.map(item => `.${item}`).join(', ');\n    if (flavorstring.length) {\n        let flavorsShow = document.querySelectorAll(flavorstring);\n        flavorsShow.forEach(element => {\n            element.classList.remove('hidden');\n        });\n    }\n\n    // Show add buttons.\n    let addsShow = document.getElementsByClassName('addcontainer');\n    addsShow.forEach(element => {\n        element.classList.remove('hidden');\n    });\n\n    // Unmark all and mark clicked compcat.\n    if (e) {\n        let items = document.getElementsByClassName('compcat');\n        items.forEach(element => {\n            element.classList.remove('active');\n        });\n        let item = e.target.closest('.compcat');\n        item.classList.add('active');\n    }\n\n    // Special case, unassigned items, show all items without connection to compcat.\n    if (compcat == 'found-items') {\n        let found = document.querySelector('.compcat[data-compcat=\"found-items\"]');\n        if (found.dataset.loneflavors.length) {\n            let flavorsShow = document.querySelectorAll(found.dataset.loneflavors);\n            flavorsShow.forEach(element => {\n                element.classList.remove('hidden');\n            });\n        }\n        if (found.dataset.lonevariants.length) {\n            let variantsShow = document.querySelectorAll(found.dataset.lonevariants);\n            variantsShow.forEach(element => {\n                element.classList.remove('hidden');\n            });\n        }\n        if (found.dataset.lonecomponents.length) {\n            let componentsShow = document.querySelectorAll(found.dataset.lonecomponents);\n            componentsShow.forEach(element => {\n                element.classList.remove('hidden');\n            });\n        }\n    }\n}\n\n/**\n * Reload for new items.\n * @param {*} form\n */\nfunction reloadIfNew(form) {\n    // Newly created element without id?\n    if (!form.elements.id.value) {\n        reload();\n    }\n}\n\n/**\n * Reload page with active compcat.\n */\nfunction reload() {\n    // Reload page with active compcat.\n    const currentUrl = new URL(window.location.href);\n    currentUrl.searchParams.set('compcat', getActiveCompcatName());\n    window.location.href = currentUrl.toString();\n}\n\n/**\n * Get the current active compcat.\n * @returns string Name of active compcat.\n */\nfunction getActiveCompcatName() {\n    const compcat = document.querySelector('.compcat.active');\n    if (!compcat) {\n        return '';\n    }\n    return compcat.dataset.compcat ?? '';\n}\n\n/**\n * Get the current active compcat.\n * @returns int Id of active compcat.\n */\nfunction getActiveCompcatId() {\n    const compcat = document.querySelector('.compcat.active');\n    if (!compcat) {\n        return 0;\n    }\n    return compcat.dataset.id ?? 0;\n}\n\n/**\n * Duplicate elements items.\n * @param {*} id\n * @param {*} table\n * @returns {mixed}\n */\nexport const duplicateItem = (id, table) => fetchMany(\n    [{\n        methodname: 'tiny_elements_duplicate_item',\n        args: {\n            id,\n            table,\n        }\n    }])[0];\n\n"],"names":["PreviewModal","Modal","configure","modalConfig","removeOnClose","large","showModal","e","id","table","title","preventDefault","modalForm","ModalForm","formClass","args","compcat","getActiveCompcatId","categoryname","getActiveCompcatName","addEventListener","events","FORM_SUBMITTED","getFormNode","elements","value","reload","show","importModalSubmitted","detail","update","location","stopPropagation","then","async","Notification","alert","html","catch","error","document","getElementById","importModal","getElementsByClassName","forEach","element","dataset","deleteItem","link","querySelector","closest","remove","deleteModal","preview","target","create","templateContext","component","flavors","trim","split","config","M","cfg","previewModal","showItems","querySelectorAll","flavor","compflavorModal","displaynamesModal","displaynamesFlavorModal","displaynamesVariantModal","duplicateItem","always","click","params","compcatactive","classList","add","methodname","itemsShow","usedFlavors","includes","length","push","flavorstring","map","item","join","found","loneflavors","lonevariants","lonecomponents","currentUrl","URL","window","href","searchParams","set","toString"],"mappings":"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"}