{"version":3,"file":"data.min.js","sources":["../src/data.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Container for tiny_elements data (categories, components, flavors, variants).\n *\n * @module     tiny_elements/data\n * @copyright  2025 ISB Bayern\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {get_strings as getStrings} from 'core/str';\nimport {component as pluginname} from './common';\nimport {\n    variantExists,\n    setData as setVariantsData\n} from './variantslib';\nimport {\n    findById,\n    findByName\n} from './helper';\nimport {call as fetchMany} from 'core/ajax';\n\nexport default class Data {\n    categories = [];\n    components = [];\n    flavors = [];\n    variants = [];\n    langStrings = {};\n    userStudent = false;\n    canManage = false;\n    contextid = 1;\n\n    constructor(contextid, userStudent, previewElements, canManage) {\n        this.contextid = contextid;\n        this.userStudent = userStudent;\n        this.previewElements = previewElements;\n        this.canManage = canManage;\n        setVariantsData(this);\n    }\n\n    async loadData() {\n        await this.loadElementsData();\n        this.langStrings = await this.getAllStrings();\n    }\n\n    getComponents() {\n        return this.components;\n    }\n\n    getFlavors() {\n        return this.flavors;\n    }\n\n    getVariants() {\n        return this.variants;\n    }\n\n    getComponentById(id) {\n        return findById(this.components, id);\n    }\n\n    getCategoryFlavors(categoryname) {\n        const categoryFlavors = [];\n        this.flavors.forEach(flavor => {\n            if (flavor.categoryname == categoryname) {\n                categoryFlavors.push({\n                    id: flavor.id,\n                    name: flavor.name,\n                    displayname: flavor.displayname,\n                    displayorder: flavor.displayorder,\n                });\n            }\n        });\n        return categoryFlavors;\n    }\n\n    /**\n     * Get the Elements categories for the dialogue.\n     *\n     * @returns {object} data\n     */\n    getCategories() {\n        const cats = [];\n        // Iterate over contexts.\n        this.categories.forEach((category) => {\n            let categoryFlavors = this.getCategoryFlavors(category.name);\n            categoryFlavors.sort((a, b) => a.displayorder - b.displayorder);\n            let hasFlavors = Array.isArray(categoryFlavors) && categoryFlavors.length;\n            cats.push({\n                categoryid: category.id,\n                name: category.displayname,\n                categoryname: category.name,\n                type: category.id,\n                displayorder: category.displayorder,\n                flavors: categoryFlavors,\n                hasFlavors: hasFlavors,\n                active: '',\n            });\n        });\n        // Sort by displayorder and set first to active.\n        cats.sort((a, b) => a.displayorder - b.displayorder);\n        if (cats.length > 0) {\n            cats[0].active = 'active';\n            if (cats[0].flavors.length > 0) {\n                cats[0].flavors[0].factive = 'active';\n            }\n        }\n\n        return cats;\n    }\n\n    getComponentVariants(component) {\n        const componentVariants = [];\n        component.variants.forEach(variant => {\n            let variantitem = findByName(this.variants, variant);\n            if (variantitem !== undefined) {\n                let state = variantExists(component.name, variantitem.name) ? 'on' : 'off';\n                componentVariants.push({\n                    id: variantitem.id,\n                    name: variantitem.name,\n                    displayname: variantitem.displayname,\n                    state: state,\n                    imageClass: variantitem.name + '-variant-' + state,\n                    variantclass: (variantitem.c4lcompatibility ? 'c4l' : 'elements') + '-' + variantitem.name + '-variant',\n                    title: this.langStrings.get(variantitem.name),\n                    content: variantitem.content,\n                });\n            }\n        });\n        componentVariants.sort((a, b) => (a.name.localeCompare(b.name)));\n        return componentVariants;\n    }\n\n    getCategoryById(id) {\n        return findById(this.categories, id);\n    }\n\n    getLangString(id) {\n        return this.langStrings.get(id);\n    }\n\n    /**\n     * Get the Elements buttons for the dialogue.\n     *\n     * @param {Editor} editor\n     * @returns {object} buttons\n     */\n    getButtons(editor) {\n        const buttons = [];\n        // Not used at the moment.\n        // eslint-disable-next-line no-unused-vars\n        const sel = editor.selection.getContent();\n        Object.values(this.components).forEach(component => {\n            buttons.push({\n                id: component.id,\n                name: component.displayname,\n                type: component.categoryname,\n                imageClass: 'elements-' + component.name + '-icon',\n                htmlcode: component.code,\n                variants: this.getComponentVariants(component),\n                flavorlist: component.flavors.join(','),\n                category: component.categoryname,\n                displayorder: component.displayorder,\n            });\n        });\n        buttons.sort((a, b) => a.displayorder - b.displayorder);\n\n        return buttons;\n    }\n\n    /**\n     * Get the template context for the dialogue.\n     *\n     * @param {Editor} editor\n     * @returns {object} data\n     */\n    getTemplateContext(editor) {\n        return Object.assign({}, {\n            elementid: editor.id,\n            buttons: this.getButtons(editor),\n            categories: this.getCategories(),\n            preview: this.previewElements,\n            canmanage: this.canManage,\n        });\n    }\n\n    getPreviewElements() {\n        return this.previewElements;\n    }\n\n    /**\n     * Get language strings.\n     *\n     * @return {object} Language strings\n     */\n    async getAllStrings() {\n        const keys = [];\n        const compRegex = /{{#([^}]*)}}/g;\n\n        this.components.forEach(element => {\n            // Get lang strings from components.\n            [...element.code.matchAll(compRegex)].forEach(strLang => {\n                if (keys.indexOf(strLang[1]) === -1) {\n                    keys.push(strLang[1]);\n                }\n            });\n\n            // Get lang strings from text placeholders.\n            [...element.text.matchAll(compRegex)].forEach(strLang => {\n                if (keys.indexOf(strLang[1]) === -1) {\n                    keys.push(strLang[1]);\n                }\n            });\n        });\n\n        const stringValues = await getStrings(keys.map((key) => ({key, pluginname})));\n        return new Map(keys.map((key, index) => ([key, stringValues[index]])));\n    }\n\n    async loadElementsData() {\n        const data = await fetchMany([{\n            methodname: 'tiny_elements_get_elements_data',\n            args: {\n                isstudent: this.userStudent,\n                contextid: this.contextid\n            },\n        }])[0];\n\n        // TODO error handling.\n        const indexedComponents = [];\n        data.components.forEach(component => {\n            indexedComponents[component.id] = component;\n        });\n\n        const indexedVariants = [];\n        data.variants.forEach(variant => {\n            indexedVariants[variant.id] = variant;\n        });\n\n        const indexedCategories = [];\n        data.categories.forEach(category => {\n            indexedCategories[category.id] = category;\n        });\n\n        this.components = indexedComponents;\n        this.variants = indexedVariants;\n        this.categories = indexedCategories;\n        this.flavors = data.flavors;\n    }\n}\n"],"names":["constructor","contextid","userStudent","previewElements","canManage","this","loadElementsData","langStrings","getAllStrings","getComponents","components","getFlavors","flavors","getVariants","variants","getComponentById","id","getCategoryFlavors","categoryname","categoryFlavors","forEach","flavor","push","name","displayname","displayorder","getCategories","cats","categories","category","sort","a","b","hasFlavors","Array","isArray","length","categoryid","type","active","factive","getComponentVariants","component","componentVariants","variant","variantitem","undefined","state","imageClass","variantclass","c4lcompatibility","title","get","content","localeCompare","getCategoryById","getLangString","getButtons","editor","buttons","selection","getContent","Object","values","htmlcode","code","flavorlist","join","getTemplateContext","assign","elementid","preview","canmanage","getPreviewElements","keys","compRegex","element","matchAll","strLang","indexOf","text","stringValues","map","key","pluginname","Map","index","data","methodname","args","isstudent","indexedComponents","indexedVariants","indexedCategories"],"mappings":"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"}